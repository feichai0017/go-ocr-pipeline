// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: proto/vanna/vanna.proto

package vanna

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VannaService_GenerateSQL_FullMethodName = "/vanna.VannaService/GenerateSQL"
	VannaService_ValidateSQL_FullMethodName = "/vanna.VannaService/ValidateSQL"
	VannaService_ExplainSQL_FullMethodName  = "/vanna.VannaService/ExplainSQL"
	VannaService_Train_FullMethodName       = "/vanna.VannaService/Train"
)

// VannaServiceClient is the client API for VannaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VannaServiceClient interface {
	GenerateSQL(ctx context.Context, in *GenerateSQLRequest, opts ...grpc.CallOption) (*GenerateSQLResponse, error)
	ValidateSQL(ctx context.Context, in *ValidateSQLRequest, opts ...grpc.CallOption) (*ValidateSQLResponse, error)
	ExplainSQL(ctx context.Context, in *ExplainSQLRequest, opts ...grpc.CallOption) (*ExplainSQLResponse, error)
	Train(ctx context.Context, in *TrainRequest, opts ...grpc.CallOption) (*TrainResponse, error)
}

type vannaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVannaServiceClient(cc grpc.ClientConnInterface) VannaServiceClient {
	return &vannaServiceClient{cc}
}

func (c *vannaServiceClient) GenerateSQL(ctx context.Context, in *GenerateSQLRequest, opts ...grpc.CallOption) (*GenerateSQLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateSQLResponse)
	err := c.cc.Invoke(ctx, VannaService_GenerateSQL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vannaServiceClient) ValidateSQL(ctx context.Context, in *ValidateSQLRequest, opts ...grpc.CallOption) (*ValidateSQLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateSQLResponse)
	err := c.cc.Invoke(ctx, VannaService_ValidateSQL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vannaServiceClient) ExplainSQL(ctx context.Context, in *ExplainSQLRequest, opts ...grpc.CallOption) (*ExplainSQLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExplainSQLResponse)
	err := c.cc.Invoke(ctx, VannaService_ExplainSQL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vannaServiceClient) Train(ctx context.Context, in *TrainRequest, opts ...grpc.CallOption) (*TrainResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TrainResponse)
	err := c.cc.Invoke(ctx, VannaService_Train_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VannaServiceServer is the server API for VannaService service.
// All implementations must embed UnimplementedVannaServiceServer
// for forward compatibility.
type VannaServiceServer interface {
	GenerateSQL(context.Context, *GenerateSQLRequest) (*GenerateSQLResponse, error)
	ValidateSQL(context.Context, *ValidateSQLRequest) (*ValidateSQLResponse, error)
	ExplainSQL(context.Context, *ExplainSQLRequest) (*ExplainSQLResponse, error)
	Train(context.Context, *TrainRequest) (*TrainResponse, error)
	mustEmbedUnimplementedVannaServiceServer()
}

// UnimplementedVannaServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVannaServiceServer struct{}

func (UnimplementedVannaServiceServer) GenerateSQL(context.Context, *GenerateSQLRequest) (*GenerateSQLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateSQL not implemented")
}
func (UnimplementedVannaServiceServer) ValidateSQL(context.Context, *ValidateSQLRequest) (*ValidateSQLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateSQL not implemented")
}
func (UnimplementedVannaServiceServer) ExplainSQL(context.Context, *ExplainSQLRequest) (*ExplainSQLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExplainSQL not implemented")
}
func (UnimplementedVannaServiceServer) Train(context.Context, *TrainRequest) (*TrainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Train not implemented")
}
func (UnimplementedVannaServiceServer) mustEmbedUnimplementedVannaServiceServer() {}
func (UnimplementedVannaServiceServer) testEmbeddedByValue()                      {}

// UnsafeVannaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VannaServiceServer will
// result in compilation errors.
type UnsafeVannaServiceServer interface {
	mustEmbedUnimplementedVannaServiceServer()
}

func RegisterVannaServiceServer(s grpc.ServiceRegistrar, srv VannaServiceServer) {
	// If the following call pancis, it indicates UnimplementedVannaServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VannaService_ServiceDesc, srv)
}

func _VannaService_GenerateSQL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateSQLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VannaServiceServer).GenerateSQL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VannaService_GenerateSQL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VannaServiceServer).GenerateSQL(ctx, req.(*GenerateSQLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VannaService_ValidateSQL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateSQLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VannaServiceServer).ValidateSQL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VannaService_ValidateSQL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VannaServiceServer).ValidateSQL(ctx, req.(*ValidateSQLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VannaService_ExplainSQL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExplainSQLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VannaServiceServer).ExplainSQL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VannaService_ExplainSQL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VannaServiceServer).ExplainSQL(ctx, req.(*ExplainSQLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VannaService_Train_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VannaServiceServer).Train(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VannaService_Train_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VannaServiceServer).Train(ctx, req.(*TrainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VannaService_ServiceDesc is the grpc.ServiceDesc for VannaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VannaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vanna.VannaService",
	HandlerType: (*VannaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateSQL",
			Handler:    _VannaService_GenerateSQL_Handler,
		},
		{
			MethodName: "ValidateSQL",
			Handler:    _VannaService_ValidateSQL_Handler,
		},
		{
			MethodName: "ExplainSQL",
			Handler:    _VannaService_ExplainSQL_Handler,
		},
		{
			MethodName: "Train",
			Handler:    _VannaService_Train_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/vanna/vanna.proto",
}
